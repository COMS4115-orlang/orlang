type token =
  | MATCH
  | WITH
  | GUARD
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COMMA
  | LAMBDA
  | ARROW
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | LET
  | REC
  | EQUALS
  | WHERE
  | AND
  | IN
  | IF
  | THEN
  | ELSE
  | PIF
  | PTHEN
  | PELSE
  | EOF
  | VAL
  | COLON
  | TRUE
  | FALSE
  | BAND
  | BOR
  | BNOT
  | DOUBLEEQUALS
  | LITERAL of (int)
  | VARIABLE of (string)
  | TYPE of (string)
  | TYPEVAR of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 
   open Ast 
   open List  
# 51 "parser.ml"
let yytransl_const = [|
  257 (* MATCH *);
  258 (* WITH *);
  259 (* GUARD *);
  260 (* SEMICOLON *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* COMMA *);
  266 (* LAMBDA *);
  267 (* ARROW *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIV *);
  272 (* MOD *);
  273 (* LET *);
  274 (* REC *);
  275 (* EQUALS *);
  276 (* WHERE *);
  277 (* AND *);
  278 (* IN *);
  279 (* IF *);
  280 (* THEN *);
  281 (* ELSE *);
  282 (* PIF *);
  283 (* PTHEN *);
  284 (* PELSE *);
    0 (* EOF *);
  285 (* VAL *);
  286 (* COLON *);
  287 (* TRUE *);
  288 (* FALSE *);
  289 (* BAND *);
  290 (* BOR *);
  291 (* BNOT *);
  292 (* DOUBLEEQUALS *);
    0|]

let yytransl_block = [|
  293 (* LITERAL *);
  294 (* VARIABLE *);
  295 (* TYPE *);
  296 (* TYPEVAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\004\000\004\000\005\000\005\000\009\000\003\000\003\000\003\000\
\003\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\012\000\012\000\013\000\013\000\011\000\011\000\
\014\000\014\000\014\000\010\000\010\000\007\000\007\000\008\000\
\008\000\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\002\000\003\000\005\000\002\000\004\000\
\003\000\001\000\003\000\002\000\004\000\001\000\001\000\003\000\
\003\000\001\000\003\000\002\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\006\000\006\000\
\005\000\003\000\001\000\003\000\001\000\003\000\004\000\005\000\
\001\000\001\000\002\000\003\000\002\000\001\000\002\000\001\000\
\001\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\012\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\000\000\048\000\051\000\
\000\000\000\000\046\000\008\000\000\000\000\000\014\000\015\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\052\000\000\000\034\000\000\000\045\000\000\000\
\000\000\000\000\000\000\000\000\024\000\025\000\026\000\000\000\
\000\000\000\000\000\000\009\000\016\000\000\000\000\000\000\000\
\036\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\033\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\038\000\040\000"

let yydgoto = "\002\000\
\005\000\006\000\041\000\036\000\037\000\045\000\034\000\035\000\
\007\000\048\000\088\000\046\000\101\000\096\000"

let yysindex = "\009\000\
\254\254\000\000\242\254\243\254\000\000\254\254\009\255\016\255\
\240\254\013\255\025\255\000\000\254\254\038\255\067\255\000\000\
\016\255\251\254\000\000\016\255\067\255\067\255\067\255\018\255\
\016\255\067\255\067\255\000\000\000\000\067\255\000\000\000\000\
\174\001\000\255\000\000\000\000\046\255\251\254\000\000\000\000\
\058\255\000\000\095\255\131\255\139\255\062\255\001\255\000\000\
\053\255\170\255\200\255\050\255\067\255\067\255\067\255\067\255\
\067\255\251\254\067\255\067\255\067\255\000\000\016\255\010\255\
\251\254\073\255\000\000\067\255\000\000\067\255\000\000\067\255\
\067\255\067\255\036\255\036\255\000\000\000\000\000\000\058\255\
\050\255\050\255\105\255\000\000\000\000\058\255\238\254\074\255\
\000\000\174\001\174\001\207\255\169\001\000\000\067\255\060\255\
\000\000\067\255\067\255\165\255\000\000\067\255\174\001\174\001\
\067\255\100\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\000\000\007\000\000\000\000\000\083\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\135\000\001\000\000\000\000\000\100\000\000\000\000\000\000\000\
\070\255\000\000\000\000\000\000\080\255\000\000\000\000\000\000\
\000\000\000\000\000\000\176\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\106\000\141\000\000\000\000\000\000\000\036\000\
\211\000\246\000\027\001\000\000\000\000\071\000\000\000\000\000\
\000\000\062\001\094\001\000\000\000\000\000\000\072\255\000\000\
\000\000\000\000\000\000\075\255\000\000\000\000\122\001\151\001\
\000\000\091\255\000\000\000\000"

let yygindex = "\000\000\
\005\000\089\000\015\000\242\255\020\000\243\255\000\000\067\000\
\000\000\075\000\017\000\056\000\021\000\000\000"

let yytablesize = 722
let yytable = "\038\000\
\018\000\033\000\015\000\008\000\022\000\042\000\007\000\043\000\
\044\000\001\000\012\000\070\000\050\000\051\000\003\000\085\000\
\052\000\019\000\094\000\095\000\065\000\009\000\010\000\009\000\
\011\000\003\000\004\000\014\000\016\000\005\000\028\000\029\000\
\017\000\039\000\040\000\019\000\031\000\032\000\047\000\075\000\
\076\000\077\000\078\000\079\000\049\000\081\000\082\000\083\000\
\084\000\055\000\056\000\057\000\064\000\009\000\018\000\047\000\
\090\000\020\000\091\000\092\000\093\000\053\000\054\000\055\000\
\056\000\057\000\063\000\021\000\065\000\069\000\017\000\022\000\
\080\000\023\000\072\000\087\000\024\000\097\000\102\000\086\000\
\003\000\100\000\004\000\025\000\103\000\104\000\013\000\035\000\
\106\000\026\000\042\000\100\000\027\000\037\000\039\000\013\000\
\066\000\028\000\029\000\010\000\062\000\030\000\087\000\031\000\
\032\000\022\000\053\000\054\000\055\000\056\000\057\000\053\000\
\054\000\055\000\056\000\057\000\053\000\054\000\055\000\056\000\
\057\000\071\000\108\000\089\000\058\000\107\000\000\000\059\000\
\060\000\058\000\061\000\000\000\059\000\060\000\011\000\061\000\
\067\000\059\000\060\000\000\000\023\000\000\000\053\000\054\000\
\055\000\056\000\057\000\068\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\059\000\060\000\000\000\061\000\000\000\
\058\000\000\000\000\000\059\000\060\000\105\000\061\000\030\000\
\053\000\054\000\055\000\056\000\057\000\053\000\054\000\055\000\
\056\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\058\000\000\000\000\000\059\000\060\000\058\000\
\061\000\000\000\059\000\060\000\000\000\061\000\000\000\000\000\
\000\000\000\000\027\000\053\000\054\000\055\000\056\000\057\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\000\000\
\000\000\000\000\074\000\000\000\000\000\058\000\000\000\098\000\
\059\000\060\000\000\000\061\000\058\000\000\000\000\000\059\000\
\060\000\000\000\061\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\018\000\018\000\000\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\018\000\018\000\018\000\018\000\007\000\
\018\000\018\000\029\000\018\000\018\000\018\000\018\000\000\000\
\000\000\018\000\018\000\007\000\018\000\019\000\019\000\019\000\
\000\000\019\000\000\000\019\000\019\000\000\000\005\000\019\000\
\019\000\019\000\019\000\019\000\019\000\000\000\019\000\019\000\
\019\000\019\000\005\000\019\000\019\000\044\000\019\000\019\000\
\019\000\019\000\000\000\000\000\019\000\019\000\000\000\019\000\
\017\000\017\000\017\000\000\000\017\000\000\000\017\000\017\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\017\000\017\000\017\000\021\000\017\000\017\000\
\000\000\017\000\017\000\017\000\017\000\000\000\000\000\017\000\
\017\000\000\000\017\000\022\000\022\000\022\000\000\000\022\000\
\000\000\022\000\022\000\000\000\010\000\022\000\022\000\000\000\
\000\000\031\000\022\000\000\000\022\000\022\000\022\000\022\000\
\010\000\022\000\022\000\000\000\022\000\022\000\022\000\022\000\
\000\000\000\000\022\000\022\000\000\000\022\000\023\000\023\000\
\023\000\000\000\023\000\000\000\023\000\023\000\032\000\011\000\
\023\000\023\000\011\000\011\000\011\000\023\000\000\000\023\000\
\023\000\023\000\023\000\011\000\023\000\023\000\000\000\023\000\
\023\000\023\000\023\000\000\000\000\000\023\000\023\000\000\000\
\023\000\030\000\030\000\030\000\000\000\030\000\000\000\030\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\030\000\030\000\030\000\030\000\000\000\030\000\
\030\000\000\000\030\000\030\000\030\000\030\000\000\000\000\000\
\030\000\030\000\000\000\030\000\027\000\027\000\027\000\000\000\
\027\000\000\000\027\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\027\000\027\000\027\000\
\027\000\000\000\027\000\027\000\000\000\027\000\027\000\027\000\
\027\000\000\000\000\000\027\000\027\000\000\000\027\000\028\000\
\028\000\028\000\000\000\028\000\000\000\028\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\028\000\028\000\028\000\028\000\000\000\028\000\028\000\000\000\
\028\000\028\000\028\000\028\000\000\000\000\000\028\000\028\000\
\000\000\028\000\000\000\000\000\029\000\029\000\029\000\000\000\
\029\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\029\000\029\000\029\000\
\029\000\000\000\029\000\029\000\000\000\029\000\029\000\029\000\
\029\000\000\000\000\000\000\000\000\000\000\000\029\000\044\000\
\044\000\044\000\000\000\044\000\000\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\044\000\044\000\044\000\044\000\000\000\044\000\044\000\000\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\021\000\
\021\000\021\000\000\000\021\000\000\000\021\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\
\021\000\021\000\021\000\031\000\031\000\031\000\000\000\031\000\
\000\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\031\000\031\000\031\000\031\000\
\000\000\031\000\031\000\000\000\031\000\031\000\031\000\000\000\
\032\000\032\000\032\000\000\000\032\000\000\000\032\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\032\000\032\000\032\000\032\000\000\000\032\000\032\000\
\000\000\032\000\032\000\032\000\053\000\054\000\055\000\056\000\
\057\000\053\000\054\000\055\000\056\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\099\000\000\000\058\000\000\000\
\000\000\059\000\060\000\058\000\061\000\000\000\059\000\060\000\
\000\000\061\000"

let yycheck = "\005\001\
\000\000\015\000\019\001\018\001\005\001\020\000\000\000\021\000\
\022\000\001\000\006\000\011\001\026\000\027\000\017\001\006\001\
\030\000\013\000\037\001\038\001\011\001\038\001\003\000\038\001\
\038\001\017\001\029\001\008\000\009\000\000\000\031\001\032\001\
\020\001\039\001\040\001\000\000\037\001\038\001\038\001\053\000\
\054\000\055\000\056\000\057\000\025\000\059\000\060\000\061\000\
\063\000\014\001\015\001\016\001\038\000\038\001\030\001\038\001\
\070\000\020\001\072\000\073\000\074\000\012\001\013\001\014\001\
\015\001\016\001\021\001\001\001\011\001\008\001\000\000\005\001\
\058\000\007\001\022\001\003\001\010\001\004\001\019\001\065\000\
\000\000\095\000\000\000\017\001\098\000\099\000\017\001\008\001\
\102\000\023\001\019\001\105\000\026\001\019\001\004\001\007\000\
\002\001\031\001\032\001\000\000\034\000\035\001\003\001\037\001\
\038\001\000\000\012\001\013\001\014\001\015\001\016\001\012\001\
\013\001\014\001\015\001\016\001\012\001\013\001\014\001\015\001\
\016\001\047\000\106\000\068\000\030\001\105\000\255\255\033\001\
\034\001\030\001\036\001\255\255\033\001\034\001\000\000\036\001\
\006\001\033\001\034\001\255\255\000\000\255\255\012\001\013\001\
\014\001\015\001\016\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\033\001\034\001\255\255\036\001\255\255\
\030\001\255\255\255\255\033\001\034\001\009\001\036\001\000\000\
\012\001\013\001\014\001\015\001\016\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\030\001\255\255\255\255\033\001\034\001\030\001\
\036\001\255\255\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\000\000\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\027\001\255\255\255\255\030\001\255\255\025\001\
\033\001\034\001\255\255\036\001\030\001\255\255\255\255\033\001\
\034\001\255\255\036\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\017\001\
\024\001\025\001\000\000\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\029\001\036\001\002\001\003\001\004\001\
\255\255\006\001\255\255\008\001\009\001\255\255\017\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\029\001\024\001\025\001\000\000\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\255\255\036\001\
\002\001\003\001\004\001\255\255\006\001\255\255\008\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\000\000\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\034\001\255\255\036\001\002\001\003\001\004\001\255\255\006\001\
\255\255\008\001\009\001\255\255\017\001\012\001\013\001\255\255\
\255\255\000\000\017\001\255\255\019\001\020\001\021\001\022\001\
\029\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\255\255\036\001\002\001\003\001\
\004\001\255\255\006\001\255\255\008\001\009\001\000\000\017\001\
\012\001\013\001\020\001\021\001\022\001\017\001\255\255\019\001\
\020\001\021\001\022\001\029\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\255\255\
\036\001\002\001\003\001\004\001\255\255\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\255\255\036\001\002\001\003\001\004\001\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\255\255\036\001\002\001\
\003\001\004\001\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\036\001\255\255\255\255\002\001\003\001\004\001\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\036\001\002\001\
\003\001\004\001\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\255\255\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\002\001\
\003\001\004\001\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\255\255\
\027\001\028\001\029\001\002\001\003\001\004\001\255\255\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\255\255\027\001\028\001\029\001\255\255\
\002\001\003\001\004\001\255\255\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\255\255\027\001\028\001\029\001\012\001\013\001\014\001\015\001\
\016\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\030\001\255\255\
\255\255\033\001\034\001\030\001\036\001\255\255\033\001\034\001\
\255\255\036\001"

let yynames_const = "\
  MATCH\000\
  WITH\000\
  GUARD\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  LAMBDA\000\
  ARROW\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  LET\000\
  REC\000\
  EQUALS\000\
  WHERE\000\
  AND\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PIF\000\
  PTHEN\000\
  PELSE\000\
  EOF\000\
  VAL\000\
  COLON\000\
  TRUE\000\
  FALSE\000\
  BAND\000\
  BOR\000\
  BNOT\000\
  DOUBLEEQUALS\000\
  "

let yynames_block = "\
  LITERAL\000\
  VARIABLE\000\
  TYPE\000\
  TYPEVAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.binding) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 49 "parser.mly"
                              ( NoHint(Let(_1, _2)) )
# 415 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeAnn) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 50 "parser.mly"
                              ( let (v1, tp) = _1 in
                                let Binding(LVar(v2), _, _) = _2 in
                                if v1 = v2
                                then Hint(Let(_2, _3), tp)
                                else raise(Failure("type annotation must be \
                                                    immediately followed by \
                                                    an accompanying definition"))
                              )
# 431 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 58 "parser.mly"
                              ( NoHint(Let(_1, Hint(Var "main", Concrete "Int"))) )
# 438 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeAnn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 59 "parser.mly"
                              ( let (v1, tp) = _1 in
                                let Binding(LVar(v2), _, _) = _2 in
                                if v1 = v2 
                                then Hint(Let(_2, Hint(Var "main", Concrete "Int")), tp)
                                else raise(Failure("type annotation must be \
                                                    immediately followed by \
                                                    an accompanying definition"))
                              )
# 453 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 69 "parser.mly"
                              ( let Binding(v, e, _) = _3 in Binding(v, e, true) )
# 460 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding list) in
    Obj.repr(
# 70 "parser.mly"
                              ( let Binding(v, e, _) = _3 in 
                                let body = fold_right
                                  (fun (Binding(w, f, _)) acc -> 
                                      NoHint(Call(NoHint(Lambda(w, acc)), f)))  
                                  _5
                                  e in
                                Binding(v, body, true)
                              )
# 475 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 78 "parser.mly"
                              ( _2 )
# 482 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding list) in
    Obj.repr(
# 79 "parser.mly"
                              ( let Binding(v, e, _) = _2 in 
                                let body = fold_right
                                  (fun (Binding(w, f, _)) acc -> 
                                      NoHint(Call(NoHint(Lambda(w, acc)), f)))  
                                  _4
                                  e in
                                Binding(v, body, false)
                              )
# 497 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding list) in
    Obj.repr(
# 89 "parser.mly"
                              ( _1 :: _3 )
# 505 "parser.ml"
               : Ast.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 90 "parser.mly"
                              ( [_1] )
# 512 "parser.ml"
               : Ast.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 93 "parser.mly"
                              ( Binding(LVar(_1), _3, false) )
# 520 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 94 "parser.mly"
                              ( let Binding(v, e, _) = _2
                                in Binding(LVar(_1), NoHint(Lambda(v, e)), false) )
# 529 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 98 "parser.mly"
                              ( (_2, _4) )
# 537 "parser.ml"
               : 'typeAnn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                              ( Concrete(_1) )
# 544 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                              ( TypVar(_1) )
# 551 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    Obj.repr(
# 103 "parser.mly"
                              ( _2 )
# 558 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 104 "parser.mly"
                              ( ArrowTyp(_1, _3) )
# 566 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 107 "parser.mly"
                              ( _1 )
# 573 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 108 "parser.mly"
                              ( match _1 with
                                | NoHint(e) -> Hint(e, _3)
                                | Hint(e, t) -> if t = _3
                                                then Hint(e, _3)
                                                else raise(Failure(
                                                     "multiple distinct type annotations \
                                                      referencing the same construct"))
                              )
# 588 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lambda) in
    Obj.repr(
# 116 "parser.mly"
                              ( _2 )
# 595 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 117 "parser.mly"
                              ( NoHint(Let(_2, _4)) )
# 603 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 118 "parser.mly"
                             ( NoHint(Binop(ADD, _1, _3)) )
# 611 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 119 "parser.mly"
                             ( NoHint(Binop(SUB, _1, _3)) )
# 619 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 120 "parser.mly"
                             ( NoHint(Binop(MLT, _1, _3)) )
# 627 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 121 "parser.mly"
                             ( NoHint(Binop(DIV, _1, _3)) )
# 635 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 122 "parser.mly"
                             ( NoHint(Binop(MOD, _1, _3)) )
# 643 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 123 "parser.mly"
                             ( NoHint(Binop(AND, _1, _3)) )
# 651 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 124 "parser.mly"
                             ( NoHint(Binop(OR, _1, _3)) )
# 659 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 125 "parser.mly"
                             ( NoHint(Binop(EQ, _1, _3)) )
# 667 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 126 "parser.mly"
                             ( NoHint(Unop(NOT, _2)) )
# 674 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 127 "parser.mly"
                              ( NoHint(If(_2, _4, _6)) )
# 683 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 128 "parser.mly"
                                 ( NoHint(PIf(_2, _4, _6)) )
# 692 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'patternMatrix) in
    Obj.repr(
# 129 "parser.mly"
                                          ( NoHint(PatternMatch(_2, _4)) )
# 700 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lst) in
    Obj.repr(
# 130 "parser.mly"
                              ( (*TODO*) NoHint(IntLit(0)) )
# 707 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 133 "parser.mly"
                              ( (*TODO*) NoHint(IntLit(0)) )
# 714 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lst) in
    Obj.repr(
# 134 "parser.mly"
                              ( (*TODO*) NoHint(IntLit(0)) )
# 722 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 137 "parser.mly"
                      ( [_1] )
# 729 "parser.ml"
               : 'exprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprList) in
    Obj.repr(
# 138 "parser.mly"
                      ( (_1)::(_3) )
# 737 "parser.ml"
               : 'exprList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 141 "parser.mly"
                                          ( [PatternRow(_2, _4)] )
# 745 "parser.ml"
               : 'patternMatrix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'patternMatrix) in
    Obj.repr(
# 142 "parser.mly"
                                          ( PatternRow(_2, _4)::(_5) )
# 754 "parser.ml"
               : 'patternMatrix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 145 "parser.mly"
               ( PatLit(_1) )
# 761 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
               ( PatId(_1) )
# 768 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprList) in
    Obj.repr(
# 147 "parser.mly"
                    ( PatCon(_1, _2) )
# 776 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 150 "parser.mly"
                              ( NoHint(Lambda(LVar(_1), _3)) )
# 784 "parser.ml"
               : 'lambda))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lambda) in
    Obj.repr(
# 151 "parser.mly"
                              ( NoHint(Lambda(LVar(_1), _2)) )
# 792 "parser.ml"
               : 'lambda))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 154 "parser.mly"
                              ( _1 )
# 799 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 155 "parser.mly"
                              ( NoHint(Call(_1, _2)) )
# 807 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 158 "parser.mly"
                              ( NoHint(IntLit(_1)) )
# 814 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
                              ( NoHint(BoolLit(1)) )
# 820 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                              ( NoHint(BoolLit(0)) )
# 826 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 161 "parser.mly"
                              ( NoHint(Var(_1)) )
# 833 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    Obj.repr(
# 162 "parser.mly"
                              ( _2 )
# 840 "parser.ml"
               : Ast.hExpr))
(* Entry topLevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let topLevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.hExpr)
