type token =
  | MATCH
  | WITH
  | GUARD
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COMMA
  | GUARDDOT
  | DOTGUARD
  | LAMBDA
  | ARROW
  | DARROW
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | FPLUS
  | FMINUS
  | FDIV
  | FTIMES
  | FMOD
  | LET
  | REC
  | EQUALS
  | WHERE
  | AND
  | IN
  | IF
  | THEN
  | ELSE
  | EOF
  | VAL
  | COLON
  | DCOLON
  | OTHERWISE
  | TRUE
  | FALSE
  | PRINT
  | ORD
  | CHR
  | FPTOSI
  | SITOFP
  | BAND
  | BOR
  | BNOT
  | DOUBLEEQUALS
  | LT
  | LTE
  | GT
  | GTE
  | UNIT
  | LIST
  | LITERAL of (int)
  | CLITERAL of (int)
  | FLITERAL of (float)
  | VARIABLE of (string)
  | TYPE of (string)
  | TYPEVAR of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 
   open Ast 
   open List
   open Desugar
# 72 "parser.ml"
let yytransl_const = [|
  257 (* MATCH *);
  258 (* WITH *);
  259 (* GUARD *);
  260 (* SEMICOLON *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* COMMA *);
  266 (* GUARDDOT *);
  267 (* DOTGUARD *);
  268 (* LAMBDA *);
  269 (* ARROW *);
  270 (* DARROW *);
  271 (* PLUS *);
  272 (* MINUS *);
  273 (* TIMES *);
  274 (* DIV *);
  275 (* MOD *);
  276 (* FPLUS *);
  277 (* FMINUS *);
  278 (* FDIV *);
  279 (* FTIMES *);
  280 (* FMOD *);
  281 (* LET *);
  282 (* REC *);
  283 (* EQUALS *);
  284 (* WHERE *);
  285 (* AND *);
  286 (* IN *);
  287 (* IF *);
  288 (* THEN *);
  289 (* ELSE *);
    0 (* EOF *);
  290 (* VAL *);
  291 (* COLON *);
  292 (* DCOLON *);
  293 (* OTHERWISE *);
  294 (* TRUE *);
  295 (* FALSE *);
  296 (* PRINT *);
  297 (* ORD *);
  298 (* CHR *);
  299 (* FPTOSI *);
  300 (* SITOFP *);
  301 (* BAND *);
  302 (* BOR *);
  303 (* BNOT *);
  304 (* DOUBLEEQUALS *);
  305 (* LT *);
  306 (* LTE *);
  307 (* GT *);
  308 (* GTE *);
  309 (* UNIT *);
  310 (* LIST *);
    0|]

let yytransl_block = [|
  311 (* LITERAL *);
  312 (* CLITERAL *);
  313 (* FLITERAL *);
  314 (* VARIABLE *);
  315 (* TYPE *);
  316 (* TYPEVAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\004\000\004\000\005\000\005\000\005\000\005\000\009\000\003\000\
\003\000\003\000\003\000\003\000\003\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\010\000\010\000\011\000\011\000\014\000\
\014\000\014\000\013\000\013\000\013\000\012\000\012\000\007\000\
\007\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\002\000\003\000\005\000\002\000\004\000\
\003\000\001\000\003\000\002\000\007\000\007\000\004\000\001\000\
\001\000\002\000\001\000\003\000\003\000\001\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\006\000\005\000\002\000\002\000\
\002\000\002\000\002\000\003\000\001\000\003\000\001\000\000\000\
\001\000\003\000\004\000\004\000\005\000\003\000\002\000\001\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\072\000\066\000\
\067\000\068\000\071\000\000\000\000\000\000\000\064\000\008\000\
\000\000\000\000\017\000\000\000\016\000\019\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\047\000\048\000\049\000\051\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\073\000\000\000\074\000\075\000\000\000\063\000\000\000\000\000\
\000\000\000\000\028\000\029\000\030\000\000\000\000\000\034\000\
\033\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\020\000\000\000\052\000\000\000\
\054\000\000\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000"

let yydgoto = "\002\000\
\005\000\044\000\055\000\048\000\049\000\063\000\046\000\047\000\
\007\000\057\000\059\000\067\000\140\000\064\000"

let yysindex = "\002\000\
\249\254\000\000\010\255\203\254\000\000\249\254\237\254\220\254\
\006\255\255\254\007\255\002\255\000\000\249\254\254\254\012\255\
\176\255\000\000\006\255\251\254\000\000\248\254\005\255\006\255\
\176\255\176\255\176\255\176\255\009\255\176\255\000\000\000\000\
\176\255\176\255\176\255\176\255\176\255\176\255\000\000\000\000\
\000\000\000\000\000\000\070\255\034\004\003\255\000\000\000\000\
\072\255\251\254\000\000\251\254\000\000\000\000\089\255\096\255\
\104\255\079\255\105\255\000\000\237\002\057\003\095\003\109\255\
\137\003\245\254\000\000\214\003\000\000\000\000\000\000\000\000\
\000\000\220\255\176\255\176\255\176\255\176\255\176\255\176\255\
\176\255\176\255\176\255\176\255\176\255\251\254\176\255\176\255\
\176\255\176\255\176\255\176\255\176\255\176\255\000\000\006\255\
\056\255\000\000\251\254\248\254\091\255\005\255\095\255\121\255\
\000\000\176\255\000\000\000\000\176\255\000\000\176\255\034\004\
\090\255\090\255\000\000\000\000\000\000\090\255\090\255\000\000\
\000\000\000\000\089\255\034\004\220\255\220\255\075\255\075\255\
\075\255\075\255\075\255\000\000\000\000\089\255\000\000\176\255\
\000\000\176\255\118\255\122\255\000\000\034\004\252\003\034\004\
\034\004\113\255\176\003\000\000\176\255\176\255\176\255\034\004\
\034\004\019\003\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\129\000\000\000\000\000\
\000\000\000\000\142\000\000\000\000\000\132\000\000\000\167\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\001\000\000\000\000\000\
\193\000\000\000\000\000\000\000\000\000\000\000\111\255\131\255\
\000\000\132\255\000\000\000\000\000\000\000\000\133\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\255\000\000\000\000\000\000\000\000\000\000\018\002\
\154\000\205\000\000\000\000\000\000\000\000\001\057\001\000\000\
\000\000\000\000\052\000\069\002\159\001\210\001\005\002\056\002\
\113\002\164\002\215\002\000\000\000\000\103\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\126\002\000\000\065\000\
\116\000\000\000\000\000\000\000\000\000\000\000\000\000\177\002\
\135\255\136\255\000\000"

let yygindex = "\000\000\
\010\000\037\000\223\255\241\255\036\000\251\255\000\000\101\000\
\000\000\048\000\049\000\084\000\254\255\047\000"

let yytablesize = 1366
let yytable = "\050\000\
\022\000\109\000\001\000\008\000\012\000\003\000\022\000\026\000\
\060\000\027\000\008\000\045\000\028\000\011\000\008\000\013\000\
\097\000\003\000\098\000\061\000\062\000\015\000\065\000\021\000\
\068\000\017\000\004\000\069\000\070\000\071\000\072\000\073\000\
\074\000\023\000\019\000\009\000\020\000\006\000\011\000\024\000\
\031\000\032\000\006\000\014\000\016\000\018\000\066\000\051\000\
\052\000\056\000\006\000\023\000\123\000\053\000\054\000\039\000\
\010\000\040\000\041\000\042\000\043\000\133\000\058\000\010\000\
\013\000\134\000\066\000\010\000\099\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\132\000\124\000\125\000\126\000\127\000\128\000\129\000\130\000\
\131\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\075\000\096\000\099\000\021\000\142\000\
\100\000\143\000\078\000\079\000\080\000\101\000\103\000\083\000\
\084\000\085\000\102\000\014\000\107\000\136\000\025\000\088\000\
\089\000\138\000\026\000\139\000\027\000\148\000\150\000\028\000\
\003\000\029\000\144\000\004\000\145\000\147\000\056\000\015\000\
\053\000\055\000\060\000\059\000\057\000\007\000\003\000\152\000\
\153\000\154\000\095\000\135\000\030\000\110\000\137\000\155\000\
\141\000\026\000\146\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\000\000\000\000\038\000\000\000\005\000\000\000\
\000\000\000\000\039\000\000\000\040\000\041\000\042\000\043\000\
\025\000\000\000\000\000\000\000\026\000\000\000\027\000\000\000\
\000\000\028\000\000\000\029\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\000\000\027\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\040\000\041\000\
\042\000\043\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\000\000\022\000\022\000\022\000\000\000\022\000\000\000\
\022\000\022\000\000\000\022\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\000\000\022\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\000\000\011\000\000\000\
\000\000\011\000\011\000\011\000\000\000\022\000\022\000\011\000\
\022\000\022\000\022\000\022\000\022\000\023\000\023\000\023\000\
\032\000\023\000\000\000\023\000\023\000\000\000\023\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\000\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\000\000\013\000\000\000\000\000\013\000\013\000\013\000\000\000\
\023\000\023\000\013\000\023\000\023\000\023\000\023\000\023\000\
\021\000\021\000\021\000\044\000\021\000\000\000\021\000\021\000\
\000\000\021\000\000\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\000\000\021\000\021\000\021\000\000\000\021\000\021\000\
\021\000\021\000\021\000\000\000\014\000\000\000\000\000\014\000\
\014\000\014\000\000\000\021\000\021\000\014\000\021\000\021\000\
\021\000\021\000\021\000\026\000\026\000\026\000\036\000\026\000\
\000\000\026\000\026\000\000\000\026\000\000\000\007\000\026\000\
\026\000\026\000\000\000\007\000\000\000\026\000\026\000\007\000\
\000\000\000\000\026\000\000\000\000\000\026\000\026\000\026\000\
\000\000\026\000\026\000\026\000\026\000\026\000\000\000\005\000\
\000\000\000\000\000\000\000\000\005\000\000\000\026\000\026\000\
\005\000\026\000\026\000\026\000\026\000\026\000\027\000\027\000\
\027\000\037\000\027\000\000\000\027\000\027\000\000\000\027\000\
\000\000\010\000\027\000\027\000\027\000\000\000\010\000\000\000\
\027\000\027\000\010\000\000\000\000\000\027\000\000\000\000\000\
\027\000\027\000\027\000\000\000\027\000\027\000\027\000\027\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\027\000\000\000\027\000\027\000\027\000\027\000\
\027\000\031\000\031\000\031\000\039\000\031\000\000\000\031\000\
\031\000\000\000\031\000\000\000\000\000\031\000\031\000\031\000\
\000\000\025\000\000\000\031\000\031\000\000\000\000\000\000\000\
\031\000\000\000\000\000\031\000\031\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\000\000\040\000\
\000\000\000\000\032\000\032\000\032\000\000\000\032\000\000\000\
\032\000\032\000\000\000\032\000\038\000\000\000\032\000\032\000\
\032\000\000\000\000\000\000\000\032\000\032\000\000\000\000\000\
\000\000\032\000\000\000\000\000\032\000\032\000\032\000\000\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\032\000\000\000\
\032\000\032\000\032\000\032\000\032\000\044\000\044\000\044\000\
\041\000\044\000\000\000\044\000\044\000\000\000\044\000\000\000\
\000\000\044\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\044\000\
\044\000\044\000\000\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\044\000\000\000\044\000\044\000\044\000\044\000\044\000\
\036\000\036\000\036\000\042\000\036\000\000\000\036\000\036\000\
\000\000\036\000\000\000\000\000\036\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\036\000\036\000\036\000\000\000\036\000\036\000\
\036\000\036\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\036\000\000\000\036\000\036\000\
\036\000\036\000\036\000\037\000\037\000\037\000\043\000\037\000\
\000\000\037\000\037\000\000\000\037\000\000\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\037\000\037\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\039\000\039\000\
\039\000\000\000\039\000\000\000\039\000\039\000\000\000\039\000\
\000\000\000\000\039\000\025\000\025\000\025\000\000\000\025\000\
\000\000\025\000\025\000\000\000\025\000\039\000\000\000\025\000\
\039\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\000\000\025\000\000\000\000\000\025\000\025\000\025\000\
\000\000\025\000\025\000\025\000\039\000\039\000\039\000\039\000\
\039\000\040\000\040\000\040\000\000\000\040\000\000\000\040\000\
\040\000\000\000\040\000\000\000\000\000\040\000\038\000\038\000\
\038\000\000\000\038\000\000\000\038\000\038\000\000\000\038\000\
\040\000\000\000\038\000\040\000\040\000\040\000\000\000\040\000\
\040\000\040\000\040\000\040\000\000\000\038\000\000\000\000\000\
\038\000\038\000\038\000\000\000\038\000\038\000\038\000\040\000\
\040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\000\000\041\000\000\000\
\041\000\041\000\000\000\041\000\000\000\000\000\041\000\062\000\
\062\000\062\000\000\000\062\000\000\000\062\000\062\000\000\000\
\062\000\041\000\000\000\062\000\041\000\041\000\041\000\000\000\
\041\000\041\000\041\000\041\000\041\000\000\000\062\000\000\000\
\000\000\062\000\062\000\062\000\000\000\062\000\062\000\062\000\
\041\000\041\000\041\000\041\000\041\000\042\000\042\000\042\000\
\000\000\042\000\000\000\042\000\042\000\000\000\042\000\000\000\
\000\000\042\000\045\000\045\000\045\000\000\000\045\000\000\000\
\045\000\045\000\000\000\045\000\042\000\000\000\045\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\000\000\045\000\000\000\000\000\045\000\045\000\045\000\000\000\
\045\000\045\000\045\000\042\000\042\000\042\000\042\000\042\000\
\043\000\043\000\043\000\000\000\043\000\000\000\043\000\043\000\
\000\000\043\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\043\000\
\000\000\000\000\043\000\043\000\043\000\000\000\043\000\043\000\
\043\000\043\000\043\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\000\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\000\000\000\000\086\000\
\087\000\000\000\000\000\000\000\000\000\139\000\000\000\000\000\
\000\000\088\000\089\000\000\000\090\000\091\000\092\000\093\000\
\094\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\087\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\105\000\088\000\
\089\000\000\000\090\000\091\000\092\000\093\000\094\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\089\000\106\000\
\090\000\091\000\092\000\093\000\094\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\087\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\088\000\089\000\000\000\090\000\091\000\
\092\000\093\000\094\000\108\000\000\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\089\000\000\000\
\090\000\091\000\092\000\093\000\094\000\151\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\087\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000\089\000\000\000\090\000\
\091\000\092\000\093\000\094\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\111\000\000\000\000\000\
\086\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\088\000\089\000\000\000\090\000\091\000\092\000\
\093\000\094\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\149\000\000\000\086\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\089\000\000\000\090\000\091\000\092\000\093\000\094\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\000\089\000\
\000\000\090\000\091\000\092\000\093\000\094\000"

let yycheck = "\005\001\
\000\000\013\001\001\000\005\001\058\001\025\001\009\001\005\001\
\024\000\007\001\005\001\017\000\010\001\000\000\005\001\006\000\
\050\000\025\001\052\000\025\000\026\000\058\001\028\000\014\000\
\030\000\027\001\034\001\033\000\034\000\035\000\036\000\037\000\
\038\000\036\001\028\001\026\001\035\001\001\000\003\000\028\001\
\038\001\039\001\006\000\007\000\009\000\010\000\058\001\053\001\
\054\001\058\001\014\000\000\000\086\000\059\001\060\001\053\001\
\058\001\055\001\056\001\057\001\058\001\006\001\058\001\058\001\
\000\000\099\000\058\001\058\001\013\001\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\096\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\030\001\029\001\013\001\000\000\109\000\
\009\001\111\000\017\001\018\001\019\001\006\001\006\001\022\001\
\023\001\024\001\036\001\000\000\008\001\027\001\001\001\045\001\
\046\001\027\001\005\001\003\001\007\001\004\001\014\001\010\001\
\000\000\012\001\136\000\000\000\138\000\139\000\008\001\025\001\
\006\001\006\001\004\001\004\001\008\001\000\000\025\001\149\000\
\150\000\151\000\046\000\100\000\031\001\066\000\102\000\154\000\
\106\000\000\000\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\047\001\255\255\000\000\255\255\
\255\255\255\255\053\001\255\255\055\001\056\001\057\001\058\001\
\001\001\255\255\255\255\255\255\005\001\255\255\007\001\255\255\
\255\255\010\001\255\255\012\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\255\255\255\255\255\255\000\000\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\056\001\
\057\001\058\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\025\001\255\255\
\255\255\028\001\029\001\030\001\255\255\045\001\046\001\034\001\
\048\001\049\001\050\001\051\001\052\001\002\001\003\001\004\001\
\000\000\006\001\255\255\008\001\009\001\255\255\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\029\001\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\255\255\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\045\001\046\001\034\001\048\001\049\001\050\001\051\001\052\001\
\002\001\003\001\004\001\000\000\006\001\255\255\008\001\009\001\
\255\255\011\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\255\255\025\001\255\255\255\255\028\001\
\029\001\030\001\255\255\045\001\046\001\034\001\048\001\049\001\
\050\001\051\001\052\001\002\001\003\001\004\001\000\000\006\001\
\255\255\008\001\009\001\255\255\011\001\255\255\025\001\014\001\
\015\001\016\001\255\255\030\001\255\255\020\001\021\001\034\001\
\255\255\255\255\025\001\255\255\255\255\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\025\001\
\255\255\255\255\255\255\255\255\030\001\255\255\045\001\046\001\
\034\001\048\001\049\001\050\001\051\001\052\001\002\001\003\001\
\004\001\000\000\006\001\255\255\008\001\009\001\255\255\011\001\
\255\255\025\001\014\001\015\001\016\001\255\255\030\001\255\255\
\020\001\021\001\034\001\255\255\255\255\025\001\255\255\255\255\
\028\001\029\001\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\045\001\046\001\255\255\048\001\049\001\050\001\051\001\
\052\001\002\001\003\001\004\001\000\000\006\001\255\255\008\001\
\009\001\255\255\011\001\255\255\255\255\014\001\015\001\016\001\
\255\255\000\000\255\255\020\001\021\001\255\255\255\255\255\255\
\025\001\255\255\255\255\028\001\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\046\001\255\255\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\000\000\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\011\001\000\000\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\255\255\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\046\001\255\255\
\048\001\049\001\050\001\051\001\052\001\002\001\003\001\004\001\
\000\000\006\001\255\255\008\001\009\001\255\255\011\001\255\255\
\255\255\014\001\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\255\255\255\255\028\001\
\029\001\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\045\001\046\001\255\255\048\001\049\001\050\001\051\001\052\001\
\002\001\003\001\004\001\000\000\006\001\255\255\008\001\009\001\
\255\255\011\001\255\255\255\255\014\001\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\046\001\255\255\048\001\049\001\
\050\001\051\001\052\001\002\001\003\001\004\001\000\000\006\001\
\255\255\008\001\009\001\255\255\011\001\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\255\255\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\052\001\002\001\003\001\
\004\001\255\255\006\001\255\255\008\001\009\001\255\255\011\001\
\255\255\255\255\014\001\002\001\003\001\004\001\255\255\006\001\
\255\255\008\001\009\001\255\255\011\001\025\001\255\255\014\001\
\028\001\029\001\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\255\255\025\001\255\255\255\255\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\048\001\049\001\050\001\051\001\
\052\001\002\001\003\001\004\001\255\255\006\001\255\255\008\001\
\009\001\255\255\011\001\255\255\255\255\014\001\002\001\003\001\
\004\001\255\255\006\001\255\255\008\001\009\001\255\255\011\001\
\025\001\255\255\014\001\028\001\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\255\255\025\001\255\255\255\255\
\028\001\029\001\030\001\255\255\032\001\033\001\034\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\011\001\255\255\255\255\014\001\002\001\
\003\001\004\001\255\255\006\001\255\255\008\001\009\001\255\255\
\011\001\025\001\255\255\014\001\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\025\001\255\255\
\255\255\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\048\001\049\001\050\001\051\001\052\001\002\001\003\001\004\001\
\255\255\006\001\255\255\008\001\009\001\255\255\011\001\255\255\
\255\255\014\001\002\001\003\001\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\011\001\025\001\255\255\014\001\028\001\
\029\001\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\255\255\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\048\001\049\001\050\001\051\001\052\001\
\002\001\003\001\004\001\255\255\006\001\255\255\008\001\009\001\
\255\255\011\001\255\255\255\255\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\035\001\
\036\001\255\255\255\255\255\255\255\255\003\001\255\255\255\255\
\255\255\045\001\046\001\255\255\048\001\049\001\050\001\051\001\
\052\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\045\001\
\046\001\255\255\048\001\049\001\050\001\051\001\052\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\046\001\009\001\
\048\001\049\001\050\001\051\001\052\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\046\001\255\255\048\001\049\001\
\050\001\051\001\052\001\011\001\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\046\001\255\255\
\048\001\049\001\050\001\051\001\052\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\046\001\255\255\048\001\
\049\001\050\001\051\001\052\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\048\001\049\001\050\001\
\051\001\052\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\045\001\046\001\255\255\048\001\049\001\050\001\051\001\052\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\052\001"

let yynames_const = "\
  MATCH\000\
  WITH\000\
  GUARD\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  GUARDDOT\000\
  DOTGUARD\000\
  LAMBDA\000\
  ARROW\000\
  DARROW\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  FPLUS\000\
  FMINUS\000\
  FDIV\000\
  FTIMES\000\
  FMOD\000\
  LET\000\
  REC\000\
  EQUALS\000\
  WHERE\000\
  AND\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EOF\000\
  VAL\000\
  COLON\000\
  DCOLON\000\
  OTHERWISE\000\
  TRUE\000\
  FALSE\000\
  PRINT\000\
  ORD\000\
  CHR\000\
  FPTOSI\000\
  SITOFP\000\
  BAND\000\
  BOR\000\
  BNOT\000\
  DOUBLEEQUALS\000\
  LT\000\
  LTE\000\
  GT\000\
  GTE\000\
  UNIT\000\
  LIST\000\
  "

let yynames_block = "\
  LITERAL\000\
  CLITERAL\000\
  FLITERAL\000\
  VARIABLE\000\
  TYPE\000\
  TYPEVAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.binding) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 56 "parser.mly"
                              ( NoHint(Let(_1, _2)) )
# 660 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeAnn) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 57 "parser.mly"
                              ( let (v1, tp) = _1 in
                                let v2 = 
                                    match _2 with
                                    | Binding(LVar(v), _, _) -> v
                                    | _ -> raise(Failure("topLevel parsing error"))
                                in 
                                if v1 = v2
                                then Hint(Let(_2, _3), tp)
                                else raise(Failure("type annotation must be \
                                                    immediately followed by \
                                                    an accompanying definition"))
                              )
# 680 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 69 "parser.mly"
                              ( NoHint(Let(_1, Hint(Var "main", Unit))) )
# 687 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeAnn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 70 "parser.mly"
                              ( let (v1, tp) = _1 in
                                let v2 = 
                                    match _2 with
                                    | Binding(LVar(v), _, _) -> v
                                    | _ -> raise(Failure("topLevel parsing error"))
                                in 
                                if v1 = v2 
                                then Hint(Let(_2, Hint(Var "main", Unit)), tp)
                                else raise(Failure("type annotation must be \
                                                    immediately followed by \
                                                    an accompanying definition"))
                              )
# 706 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 84 "parser.mly"
                              ( let b =
                                  match _3 with
                                  | Binding(v, e, _) -> Binding(v, e, true)
                                  | _                -> raise(Failure("cannot do tuple/list \
                                                                       in recursive let binding"))
                                in b 
                              )
# 719 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding list) in
    Obj.repr(
# 91 "parser.mly"
                              ( let b = 
                                  match _3 with
                                  | Binding(v, e, _) -> 
                                        let body = fold_right
                                            (fun bd acc ->
                                                match bd with
                                                | Binding(w, f, _) -> NoHint(Call(NoHint(Lambda(w, acc)), f))
                                                | _ -> raise(Failure("nope"))
                                            )  
                                            _5 e in
                                            Binding(v, body, true)
                                  | _ -> raise(Failure("cannot do tuple/list in recursive \
                                                       let binding"))
                                in b
                              )
# 741 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 106 "parser.mly"
                              ( _2 )
# 748 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding list) in
    Obj.repr(
# 107 "parser.mly"
                              ( let b =
                                  match _2 with
                                  | Binding(v, e, _) -> 
                                      let body = fold_right
                                          (fun bd acc -> 
                                              match bd with
                                              | Binding(w, f, _) -> NoHint(Call(NoHint(Lambda(w, acc)), f))
                                              | _ -> raise(Failure("nope"))
                                          ) 
                                          _4  e in
                                      Binding(v, body, false)
                                  | _ -> raise(Failure("cannot do tuple/list with let binding with where"))
                                in b
                              )
# 769 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding list) in
    Obj.repr(
# 123 "parser.mly"
                              ( _1 :: _3 )
# 777 "parser.ml"
               : Ast.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 124 "parser.mly"
                              ( [_1] )
# 784 "parser.ml"
               : Ast.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 127 "parser.mly"
                              ( Binding(LVar(_1), _3, false) )
# 792 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.binding) in
    Obj.repr(
# 128 "parser.mly"
                              ( let b = 
                                  match _2 with
                                  | Binding(v, e, _) -> Binding(LVar(_1), NoHint(Lambda(v, e)), false)
                                  | _                -> raise(Failure("cannot do this with cons/tuple binding"))
                                in b
                              )
# 805 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'multVars) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 135 "parser.mly"
                              ( MBinding((LVar(_2))::(_4), _7) )
# 814 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'consVars) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 137 "parser.mly"
                              ( CBinding(LVar((_2))::(_4), _7) )
# 823 "parser.ml"
               : Ast.binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 141 "parser.mly"
                              ( (_2, _4) )
# 831 "parser.ml"
               : 'typeAnn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 144 "parser.mly"
                              ( Concrete(_1) )
# 838 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                              ( Unit )
# 844 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 146 "parser.mly"
                              ( ListTyp(_2) )
# 851 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "parser.mly"
                              ( TypVar(_1) )
# 858 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    Obj.repr(
# 148 "parser.mly"
                              ( _2 )
# 865 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 149 "parser.mly"
                              ( ArrowTyp(_1, _3) )
# 873 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 154 "parser.mly"
                              ( _1 )
# 880 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 155 "parser.mly"
                              ( match _1 with
                                | NoHint(e) -> Hint(e, _3)
                                | Hint(e, t) -> if t = _3
                                                then Hint(e, _3)
                                                else raise(Failure(
                                                     "multiple distinct type annotations \
                                                      referencing the same construct"))
                              )
# 895 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lambda) in
    Obj.repr(
# 163 "parser.mly"
                              ( _2 )
# 902 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 164 "parser.mly"
                              ( NoHint(Let(_1, _3)) )
# 910 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 165 "parser.mly"
                              ( NoHint(Binop(ADD, _1, _3)) )
# 918 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 166 "parser.mly"
                              ( NoHint(Binop(SUB, _1, _3)) )
# 926 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 167 "parser.mly"
                              ( NoHint(Binop(MLT, _1, _3)) )
# 934 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 168 "parser.mly"
                              ( NoHint(Binop(DIV, _1, _3)) )
# 942 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 169 "parser.mly"
                              ( NoHint(Binop(MOD, _1, _3)) )
# 950 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 170 "parser.mly"
                              ( NoHint(Binop(FADD, _1, _3)) )
# 958 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 171 "parser.mly"
                              ( NoHint(Binop(FSUB, _1, _3)) )
# 966 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 172 "parser.mly"
                              ( NoHint(Binop(FMLT, _1, _3)) )
# 974 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 173 "parser.mly"
                              ( NoHint(Binop(FDIV, _1, _3)) )
# 982 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 174 "parser.mly"
                              ( NoHint(Binop(FMOD, _1, _3)) )
# 990 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 175 "parser.mly"
                              ( NoHint(Binop(AND, _1, _3)) )
# 998 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 176 "parser.mly"
                              ( NoHint(Binop(OR, _1, _3)) )
# 1006 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 177 "parser.mly"
                              ( NoHint(LCons(_1, _3)) )
# 1014 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 178 "parser.mly"
                              ( NoHint(Binop(EQ, _1, _3)) )
# 1022 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 179 "parser.mly"
                              ( NoHint(Binop(LT, _1, _3)) )
# 1030 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 180 "parser.mly"
                              ( NoHint(Binop(LTE, _1, _3)) )
# 1038 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 181 "parser.mly"
                              ( NoHint(Binop(GT, _1, _3)) )
# 1046 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 182 "parser.mly"
                              ( NoHint(Binop(GTE, _1, _3)) )
# 1054 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 183 "parser.mly"
                              ( NoHint(Unop(NOT, _2)) )
# 1061 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 184 "parser.mly"
                              ( NoHint(If(_2, _4, _6)) )
# 1070 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'patternMatrix) in
    Obj.repr(
# 185 "parser.mly"
                                          ( patternsToIfElse(PatternMatch(_2, _4)) )
# 1078 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 186 "parser.mly"
                              ( NoHint(Print(_2)) )
# 1085 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 187 "parser.mly"
                              ( NoHint(Ord(_2)) )
# 1092 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 188 "parser.mly"
                              ( NoHint(Chr(_2)) )
# 1099 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 189 "parser.mly"
                              ( NoHint(SItoFP(_2)) )
# 1106 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 190 "parser.mly"
                              ( NoHint(FPtoSI(_2)) )
# 1113 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multVars) in
    Obj.repr(
# 193 "parser.mly"
                          ( (LVar(_1))::(_3) )
# 1121 "parser.ml"
               : 'multVars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 194 "parser.mly"
                          ( [LVar(_1)] )
# 1128 "parser.ml"
               : 'multVars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consVars) in
    Obj.repr(
# 197 "parser.mly"
                           ( (LVar(_1))::(_3) )
# 1136 "parser.ml"
               : 'consVars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 198 "parser.mly"
                           ( [LVar(_1)] )
# 1143 "parser.ml"
               : 'consVars))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                              ( [] )
# 1149 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 202 "parser.mly"
                              ( [_1] )
# 1156 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lst) in
    Obj.repr(
# 203 "parser.mly"
                              ( (_1)::(_3) )
# 1164 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 206 "parser.mly"
                                       ( [PatternRow(Pattern(_2), _4)] )
# 1172 "parser.ml"
               : 'patternMatrix))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 207 "parser.mly"
                                      ( [PatternRow(PatDefault, _4)] )
# 1179 "parser.ml"
               : 'patternMatrix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.hExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'patternMatrix) in
    Obj.repr(
# 208 "parser.mly"
                                       ( PatternRow(Pattern(_2), _4)::(_5) )
# 1188 "parser.ml"
               : 'patternMatrix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 211 "parser.mly"
                              ( NoHint(Lambda(LVar(_1), _3)) )
# 1196 "parser.ml"
               : 'lambda))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lambda) in
    Obj.repr(
# 212 "parser.mly"
                              ( NoHint(Lambda(LVar(_1), _2)) )
# 1204 "parser.ml"
               : 'lambda))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 215 "parser.mly"
                              ( _1 )
# 1211 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.hExpr) in
    Obj.repr(
# 216 "parser.mly"
                              ( NoHint(Call(_1, _2)) )
# 1219 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 219 "parser.mly"
                              ( NoHint(IntLit(_1)) )
# 1226 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 220 "parser.mly"
                              ( NoHint(CharLit(_1)) )
# 1233 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 221 "parser.mly"
                              ( NoHint(FloatLit(_1)) )
# 1240 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parser.mly"
                              ( NoHint(BoolLit(1)) )
# 1246 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "parser.mly"
                              ( NoHint(BoolLit(0)) )
# 1252 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 224 "parser.mly"
                              ( NoHint(Var(_1)) )
# 1259 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "parser.mly"
                              ( NoHint(UnitLit) )
# 1265 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    Obj.repr(
# 226 "parser.mly"
                              ( _2 )
# 1272 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lst) in
    Obj.repr(
# 227 "parser.mly"
                              ( NoHint(ListLit(_2)) )
# 1279 "parser.ml"
               : Ast.hExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.hExpr) in
    Obj.repr(
# 228 "parser.mly"
                              ( NoHint(LLen(_2)) )
# 1286 "parser.ml"
               : Ast.hExpr))
(* Entry topLevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let topLevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.hExpr)
