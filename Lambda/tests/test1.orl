(* Monomorphism; non-recursive let bindings; lambdas;
   multi-variable lambdas; nested comments; function
   application; currying; where clause desugaring *)

(* this is ignored *)
(* this is (* doubly *) ignored *)

val operator_if : Bool -> 'b -> 'b -> 'b
let operator_if c t e = _if c _then t _else e

val five : Int
let five =
  let f = (\x y -> 1 * (x - 2) * y) in 
  let g x y = x * y in
  let x = 3 in
  let y = 4 in
  f (g x 2 - 3) ((\z -> z + 1) y)

val five2 : Int
let five2 =
  f (g x 2 - 3) ((\z -> z + 1) y)
  where f = (\x y -> 1 * (x - 2) * y)
    and g x y = x * y
    and x = 3
    and y = 4

val five3 : Int
let five3 =
  z
  where f = (\x y -> 1 * (x - 2) * y)
    and g x y = x * y
    and x = 3 and y = 4
    and u = g x 2 - 3
    and v = (\z -> z + 1) y
    and z = f u v

val six : Int
let six = (\x -> \y -> 6) 3 6

let main = five * 1000 + five2 * 100 + five3 * 10 + six

