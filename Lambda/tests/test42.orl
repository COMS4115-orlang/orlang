let rec lsum xss = 
  match |.xss.| with
  | 0 => 0
  | otherwise => let (x :: xs) = xss 
                 in x + (lsum xs)
  ;

let fibList n =
  let rec fibHelper n cnt acc =
    match (cnt == n) with
    | false     => let (x :: y :: xs) = acc
                   in fibHelper n (cnt + 1) ((x + y) :: acc)
    | otherwise => acc
    ;
  in
  fibHelper n 1 [0, 1]

let plus x y = x + y

let main =
  let fl = fibList 10 in
  lsum fl

