(*--- Conversions ---*)

val ord : Char -> Int
let ord x = ord_internal x

val chr : Int -> Char
let chr x = chr_internal x

val string_of_int : Int -> List Char
let string_of_int x =
  let rec helper x lst =
    if x <= 9
    then chr(x + (ord '0')) :: lst
    else let r = x % 10 in
         let x = x / 10 in
         helper x ((chr (r + (ord '0'))) :: lst)
  in 
  let str = helper x [] in
  if x < 0 
  then '-' :: str
  else str

val string_of_bool : Bool -> List Char
let string_of_bool x = 
  if x == true
  then ['t', 'r', 'u', 'e']
  else ['f', 'a', 'l', 's', 'e']

val string_of_char : Char -> List Char
let string_of_char x = x :: []

val int_of_bool : Bool -> Int
let int_of_bool x =
  if x == true
  then 1
  else 0

(*--- Printing ---*)

val print : List Char -> ()
let print x = print_internal x

val print_int : Int -> ()
let print_int x = print (string_of_int x)

val print_int_endline : Int -> ()
let print_int_endline x = 
  let useless = print_int x in
  print ('\n' :: [])

val print_endline : List Char -> ()
let print_endline x = 
  let useless = print x in
  print ('\n' :: [])

(*--- List Operations ---*)

val head : List 'any -> 'any
let head lst = 
  let (x :: xs) = lst in x

val tail : List 'bny -> List 'bny
let tail lst = 
  let (x :: xs) = lst in xs

val reverse : List 'cny -> List 'cny
let reverse lst = 
  let rec reverse_helper lst acc = 
    if |.lst.| == 0
    then
      acc
    else 
      let (x :: xs) = lst in
      reverse_helper xs (x :: acc)
  in
  reverse_helper lst []
