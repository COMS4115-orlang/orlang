(* Type Annotations *)

val operator_add : Int -> Int -> Int
let operator_add x y = x _+ y

val operator_sub : Int -> Int -> Int
let operator_sub x y = x _- y

val operator_mlt : Int -> Int -> Int
let operator_mlt x y = x _* y

val operator_div : Int -> Int -> Int
let operator_div x y = x _/ y

val operator_mod : Int -> Int -> Int
let operator_mod x y = x _% y

val operator_and : Bool -> Bool -> Bool
let operator_and x y = x _&& y

val operator_or : Bool -> Bool -> Bool
let operator_or x y = x _|| y

val operator_not : Bool -> Bool
let operator_not x = _! x

let operator_eq x y = (x _== y) : Bool

val add : Int -> Int -> Int
let add x y = (x : Int) + (y : Int)

val subtract : Int -> Int -> Int
let subtract x y = x - y : Int

val add2 : Int -> Int
let add2 x = add (2 : Int) x

val uselessMath : Int -> Int -> Int
let uselessMath x y = (add (subtract x 1) : Int -> Int) (subtract y 1)

val uselessMathLam : Int -> (Int -> Int)
let uselessMathLam x = ((\y -> x + y) : 'a -> 'a)

let main = uselessMath 1 2
