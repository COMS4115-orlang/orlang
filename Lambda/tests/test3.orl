(* booleans, and, or, not, if statement *)

val operator_add : Int -> Int -> Int
let operator_add x y = x _+ y

val operator_sub : Int -> Int -> Int
let operator_sub x y = x _- y

val operator_mlt : Int -> Int -> Int
let operator_mlt x y = x _* y

val operator_div : Int -> Int -> Int
let operator_div x y = x _/ y

val operator_mod : Int -> Int -> Int
let operator_mod x y = x _% y

val operator_and : Bool -> Bool -> Bool
let operator_and x y = x _&& y

val operator_or : Bool -> Bool -> Bool
let operator_or x y = x _|| y

val operator_not : Bool -> Bool
let operator_not x = _! x

let operator_eq x y = (x _== y) : Bool

val f: 'a -> 'a
let f = (\x -> x)

let x = true
let tru = f (x || false)
let fls = f (x && (! true))
let main = if tru 
           then
              if fls 
              then 0
              else 1
           else 0

