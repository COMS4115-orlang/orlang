(* copied over from prelude *)
(*
val print : List Char -> ()
let print x = print_internal x
*)

(*
val sortby : ('a -> 'a -> Bool) -> List 'a -> List 'a
let rec sortby cmp lst =
  match |.lst.| with
  | 0         => []
  | otherwise => let (x :: xs) = lst in
                 let lt a = cmp a x in
                 let nlt a = cmp x a in
                 extend (sortby cmp (filter lt xs)) (extend [x] (sortby cmp (filter (nlt) xs)))
  ;

val sort : List 'b -> List 'b
let sort lst = sortby (\x y -> x < y) lst
*)

(*
val reverse : List 'c -> List 'c
let reverse lst = 
  let rec reverse_helper lst acc = 
    match |.lst.| with
    | 0         => acc
    | otherwise => reverse_helper xs (x :: acc)
  in
  reverse_helper lst []

val map : ('d -> 'e) -> List 'd -> List 'e
let rec map f lst =
  match |.lst.| with
  | 0         => []
  | otherwise => let (x :: xs) = lst in
                 (f x) :: (map f xs)
  ;
*)

(*
val string_of_int : Int -> List Char
let string_of_int x =
  let rec helper x lst =
    if x <= 9
    then chr(x + (ord '0')) :: lst
    else let r = x % 10 in
         let x = x / 10 in
         helper x ((chr (r + (ord '0'))) :: lst)
  in 
  let str = helper x [] in
  if x < 0 
  then '-' :: str
  else str
*)

(*
(* orlang program *)
val main : ()
let main = 
  let lst = [6, 8, 3, 5, 9, 1, 4, 2, 7] in
  let res = map (\x -> print (string_of_int x)) ascending
    where descending = sort lst
      and ascending  = reverse descending
  in ()
*)
