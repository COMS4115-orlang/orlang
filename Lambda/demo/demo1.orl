(* copied over from prelude *)
val sort : List 'b -> List 'b
let sort lst = sort_by (\x y -> x < y) lst

val reverse : List 'c -> List 'c
let reverse lst = 
  let rec reverse_helper lst acc = 
    match |.lst.| with
    | 0         => acc
    | otherwise => let (x :: xs) = lst in
                   reverse_helper xs (x :: acc)
    ;
  in
  reverse_helper lst []

val map : ('d -> 'e) -> List 'd -> List 'e
let rec map f lst =
  match |.lst.| with
  | 0         => []
  | otherwise => let (x :: xs) = lst in
                 (f x) :: (map f xs)
  ;

(* end copy over from prelude *)

(* orlang program *)
val print_list : List Int -> List ()
let print_list lst = map (\x -> print (extend (string_of_int x) [' '])) lst

val main : ()
let main = 
  let lst = [6, 8, 3, 5, 9, 1, 4, 2, 7] in
  let prntdsc = print_list ascending
    where descending = sort lst
      and ascending  = reverse descending
  in
  let prntnl = print ['\n'] in
  let prntodd = print_list (filter (\x -> x % 2 == 1) (sort lst))
  in ()
