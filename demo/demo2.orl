let applyFnList flist alist =
  let rec applyHelper fs as acc =
    match |.fs.| with
    | 0         => reverse acc
    | otherwise => let (f::ff) = fs in
                   let (a::aa) = as in
                   applyHelper ff aa ((f a)::acc)
    ;
  in applyHelper flist alist []

val fnList : List (Int -> Int -> Int)
let fnList =
  [add, subtract, multiply]
  where add      = (\x y -> x + y)
    and subtract = (\x y -> x - y)
    and multiply = (\x y -> x * y)

val print_list : List Int -> List ()
let print_list lst = map (\x -> print (extend (string_of_int x) [' '])) lst

val main : ()
let main =
  let lst1 = [1, 2, 3] in
  let lst2 = [4, 5, 6] in
  let curried = applyFnList fnList lst1 in
  let res = applyFnList curried lst2 in
  let pnt = print_list res
  in ()
